function ProcessPackages
{
	$PackageResults = "@("
	ForEach ($Update in $Updates)
	{		
		
		IF ($ChocolateyTags)
		{
			Remove-Variable ChocolateyTags
		}
		
		IF ($PackageSummary)
		{
			Remove-Variable PackageSummary
		}
		
		#Make Human Readable Variables
		
		$Group = $Update[0]
		$PackageName = $Update[1]
		$HumanReadableName = $Update[2]
		$IsMSI = $Update[3]
		$Is64Bit = $Update[4]
		$CustomPath = $Update[5]
		
		IF ($Update[7] -ne $Null)
		{
			$URLGenerator = $Update[7]
		} ELSE {
			$URL = $Update[6]
			$URLGenerator = $Null
		}
		
		$BatchFileVersion = $Update[8]
		$SilentInstall = $Update[9]
		$NoRestart = $Update[10]
		$CustomInstallFlags = $Update[11]
		$PackageDescription = $Update[12]
		$ChocolateyTags = $Update[13]
		$WMIPackageName = $Update[14]
		
		
		#Set LocalRepo to Custom Path if defined
		
		IF ($CustomPath -ne $Null)
		{
			$LocalRepo = $CustomPath
			IF (!(Test-Path $LocalRepo))
			{
				Write-Host "Software Repository $LocalRepo dosen't seem to exist.
				Please create this location or run this script with the credentials required to access it.`r`n"
				Continue
			}
		} ELSE {
			$LocalRepo = $SoftwareRepo
		}
		
		
		#Test for Package Storage and create it if it doesn't exist
				
		$LocalRepo = $LocalRepo + $Group + $PackageName
		IF (!(Test-Path $LocalRepo))
		{
			Try
			{
				New-Item $LocalRepo -Type Directory -ErrorAction Stop | Out-Null
			} Catch {
				Write-Host "Could not create program directory of $LocalRepo.
Please ensure that this script has Write permissions to this location, and try again.`r`n"
			} 
		}
		
		
		#Set Other Useful Variables
		
		$Filename = $PackageName
		IF($Is64Bit)
		{
			$Filename = $Filename + "-x64"
		}
		
		IF ($IsMSI)
		{
			$InstallerName = $Filename + ".msi"
		} ELSE {
			$InstallerName = $Filename + ".exe"
		}
		
		#Get the Latest Software
		
		$NewInstaller = GetLatestSoftware
		
		
		#Split $NewInstaller into better variables
		
		$NewVersionAvailable = $NewInstaller[0]
		$LatestInstallLocation = $NewInstaller[1]
		$MostRecentVersion = $NewInstaller[2]
		IF ($NewInstaller[3] -ne $Null)
		{
			$PreviousVersion = $NewInstaller[3]
		}
		
		Remove-Variable NewInstaller
		
		
		#Process the Results of GetLatestSoftware
		
		Check-Results
		
		IF ($MostRecentVersion -ne $False)
		{
			$Result = "@(`"" + $HumanReadableName + "`",`"" + $MostRecentVersion + "`",`"" + $NewVersionAvailable + "`"),"
			$PackageResults = $PackageResults + $Result
		}
		
		IF ($PreviousVersion)
		{
			Remove-Variable PreviousVersion
		}
		
		IF ($NewVersionAvailable -eq $True -Or $ForceDeploymentPackage -eq $True)
		{
			IF ($MostRecentVersion -ne $False)
			{
				$TestforInstaller = $LocalRepo + "\" + $InstallerName
				
				IF ($BatchFiles -Or $Lansweeper -Or $PDQ -Or $SFX)
				{	
					IF(Test-Path $TestforInstaller)
					{						
						IF ($PackageDescription -eq $Null)
						{
							$PackageDescription = ""
						} ELSE {
							$PackageDescription = $PackageDescription + "`r`n`r`n"
						}
						
						Make-InstallPackages
					}
				}
				
				IF ($Chocolatey)
				{
					IF(Test-Path $TestforInstaller)
					{						
						IF ($PackageDescription -eq $Null)
						{
							$PackageDescription = ""
						} ELSE {
							$PackageDescription = $PackageDescription + "`r`n`r`n"
						}
						Chocolatey-Packages
					}
				}
			}
		}
	}
	$PackageResults = $PackageResults.TrimEnd(",") + ")"
	#Close the Update Logs

	"-----`r`nLast Updated - $TimeDateString" | Out-File $InstallerVersionReportLocation -Append
	"-----`r`nLast Updated - $TimeDateString" | Out-File $InstallerChangeReportLocation -Append
	
	Return $PackageResults
}