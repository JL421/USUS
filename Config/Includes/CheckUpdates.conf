function CheckUpdates
{
	ForEach ($i in $Updates)
	{
		IF ($i[0] -eq $False -And $i[1] -eq $False -And $i[2] -eq $False -And $i[3] -eq $False -And $i[4] -eq $False -And $i[5] -eq $False -And $i[6] -eq $False -And $i[7] -eq $False)
		{
			return
		}
		
		$LocalRepo = $i[5]
		
		IF (!(Test-Path $LocalRepo))
		{
			CLS
			Write-Host "Software Repository $LocalRepo dosen't seem to exist.
Please create this location or run this script with the credentials required to access it.`r`n"
			Exit
		}
		$ProgramName = $i[2]
		$url = $i[6]
		
		IF ($i[0] -eq $True)
		{
			$LocalRepo = $i[5] + "\DefaultPrograms"
			IF (!(Test-Path $LocalRepo))
			{
				Try
				{
					New-Item $LocalRepo -Type Directory -ErrorAction Stop | Out-Null
				} Catch {
					Write-Host "Could not create program directory of $LocalRepo.
Please ensure that this script has Write permissions to this location, and try again.`r`n"
				} 
			}
		}
		
		$LocalRepo = $LocalRepo + "\" + $i[1]
		IF (!(Test-Path $LocalRepo))
		{
			Try
			{
				New-Item $LocalRepo -Type Directory -ErrorAction Stop | Out-Null
			} Catch {
				Write-Host "Could not create program directory of $LocalRepo.
Please ensure that this script has Write permissions to this location, and try again.`r`n"
			} 
		}
		[string]$CurrentInstaller = $LocalRepo + "\" + $i[1]
		
		#Check Current Version
		
		$NewInstaller = GetLatestSoftware $CurrentInstaller $url $i[1] $i[3] $i[4] $i[7]
		
		$Version = $NewInstaller[3]
		
		IF ($NewInstaller[0] -eq $True)
		{
			Write-Host "New Version of $ProgramName Available!`r`n"
			Try
			{
				Copy-Item $NewInstaller[1] $LocalRepo -Force -ErrorAction Stop
			} Catch {
				Write-Host "Could not copy new installer to $LocalRepo.
Please ensure that this script has Write permissions to this location, and try again.`r`n"
			} Finally {
				IF ($NewInstaller[4])
				{
					Write-Host "
$ProgramName doesn't seem to use the Product Version property in their installers.
Please let them know you want this added!`r`n"
				} ELSE {
					Write-Host "$ProgramName updated to version $Version!`r`n"
				}
			}
			Start-Job -ScriptBlock {
				param($FileDelete)& {
					WHILE (Test-Path $FileDelete)
					{
						Remove-Item $FileDelete -Force -ErrorAction SilentlyContinue
						Start-Sleep 5
					}
				}
			} -ArgumentList $NewInstaller[1] | out-null
			"$ProgramName is on Version - $Version" | Out-File $InstallerVersionReportLocation -Append
			"$ProgramName Updated to Version - $Version" | Out-File $InstallerChangeReportLocation -Append
			
		} ELSEIF ($NewInstaller[0] -eq $False) {
			Write-Host "No New Version of $ProgramName Available`r`n"
			Start-Job -ScriptBlock {
				param($FileDelete)& {
					WHILE (Test-Path $FileDelete)
					{
						Remove-Item $FileDelete -Force -ErrorAction SilentlyContinue
						Start-Sleep 5
					}
				}
			} -ArgumentList $NewInstaller[1] | out-null
			"$ProgramName is on Version - $Version" | Out-File $InstallerVersionReportLocation -Append
		} ELSEIF ($NewInstaller[0] -eq $Null)
		{
		}
	}
}