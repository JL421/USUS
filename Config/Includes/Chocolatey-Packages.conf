<#
.SYNOPSIS
	Creates Chocolatey Packages for USUS
.NOTES
	File Name		: Chocolatey-Packages.conf
	Author			: Jason Lorsung (jason@jasonlorsung.com)
	Last Update		: 2015-07-08
	USUS Version	: 1.5
.VARIABLES
	.FUNCTIONSPECIFIC
		$ChocolateyRepo - Location of the Chocolatey Package Repository - Define in Config.conf
		$ChocolateyAuthors - Who do you want the author of the Chocolatey Package to
		read as - Define in Config.conf
		
		$ChocolateyOwners - Who do you want the Owners of the Chocolatey Package to
		read as - Define in Config.conf
		
		$ChocolateyTags - Specify Tags for the Chocolatey Package - Define in package conf
	
	.GENERAL
		$LocalRepo - Local Software Repository Location - Define in Config.conf
		$InstallerName - Filename of the Software Installer - Generated from PackageName
		and installer type (EXE or MSI)
		
		$PackageName - Shortname of the Software Package - Define in package conf
		$IncludesDir - Where are USUS includes stored - Generated from ConfigDir flag
		$MostRecentVersion - Newest version of the Software Package Available
		$PackageDescription - Detailed description for the Software Package
		$PackageSummary - A summary for the Software Package - Define in package conf
		$HumanReadableName - Human Readable Software Package Name - Define in package conf
		$TimeDateString - The time and date that this instance of USUS was started
		$IsMSI - Is the package an MSI - Define in package conf
		$Is64Bit - Is the package 64 bit - Define in package conf
		$SilentInstall - Should the MSI be installed silently - Define in package conf
		$NoRestart - Should the MSI skip a restart - Define in package conf
		$CustomInstallFlags - Any extra install flags necessary - Define in package conf
		$WMIPackageName - WMI Package name for the Chocolatey Install Already Installed Check - Define
		in package conf
		
		$PreviousVersion - Previous Version of software package - Used in versioning
		$OldRepo - Previous revision location - Used in versioning
		
	.FUNCTIONGENERATED
		$ChocolateyNuget - Final Location for the Chocolatey Nuget Package
		$NuSpecCommand - Command to Execute to generate base NuSpec XML
		$ChocolateySpecLocation - Location for the Temp NuSpec XML
		$ChocolateySpec - Variable that holds the NuSpec XML
		$NugetLocation - Temp location for the Nuget configuration files
		$NugetTools - Location for the "Tools" directory in the Nuget Package
		$ChocolateyInstallScript - Install Script that Chocolatey calls when package is run
		$PackageArguments - Arguments to pass to the Chocolatey Installer
		$ChocolateyInstallScriptLocation - Location for the Chocolatey Install Script
		
		

#>

function Chocolatey-Packages
{	
	IF ($OldRepo)
	{
		$InstallerLocation = $OldRepo + "\" + $InstallerName
	} ELSE {
		$InstallerLocation = $LocalRepo + "\" + $InstallerName
	}
	
	$ChocolateyNuget = $ChocolateyRepo + "\" + $PackageName
	$NugetLocation = $env:TEMP + "\ChocolateyNuget"
	
	IF (Test-Path $NugetLocation)
	{
		Remove-Item $NugetLocation -Recurse -Force -ErrorAction SilentlyContinue
		Try
		{
			New-Item $NugetLocation -Type Directory -ErrorAction Stop | Out-Null
		} Catch {
			Write-Host "Could not create program directory of $NugetLocation.
Please ensure that the user running this script has Write permissions to this location, and try again.`r`n"
		} 	
	} ELSE {
		Try
		{
			New-Item $NugetLocation -Type Directory -ErrorAction Stop | Out-Null
		} Catch {
			Write-Host "Could not create program directory of $NugetLocation.
Please ensure that the user running this script has Write permissions to this location, and try again.`r`n"
		} 
	}
	
	#NuSpec Creation
	
	$NuSpecCommand = $IncludesDir + "\nuget.exe spec " + $NugetLocation + "\" + $PackageName
	Invoke-Expression $NuSpecCommand | Out-Null
	$ChocolateySpecLocation = $NugetLocation + "\" + $PackageName + ".nuspec"
	
	#NuSpec Configuration
	
	[xml]$ChocolateySpec = Get-Content $ChocolateySpecLocation
	$ChocolateySpec.package.metadata.id = $PackageName
	IF ($PreviousVersion)
	{
		$ChocolateySpec.package.metadata.version = [string]$PreviousVersion
	} ELSE {
		$ChocolateySpec.package.metadata.version = [string]$MostRecentVersion
	}
	$ChocolateySpec.package.metadata.authors = $ChocolateyAuthors
	$ChocolateySpec.package.metadata.owners = $ChocolateyOwners
	IF (!($ChocolateyTags))
	{
		$ChocolateySpec.package.metadata.RemoveChild($ChocolateySpec.package.metadata.SelectSingleNode("tags")) | Out-Null
	} ELSE {
		$ChocolateySpec.package.metadata.tags = $ChocolateyTags
	}
	$ChocolateySpec.package.metadata.description = "$PackageDescription`Installs the latest $HumanReadableName - Version ($MostRecentVersion)
Updated by USUS - $TimeDateString"
	IF ($PackageSummary)
	{
		$ChocolateySpec.package.metadata.AppendChild($ChocolateySpec.CreateElement("summary")) | Out-Null
		$ChocolateySpec.package.metadata.summary = $PackageSummary
	} 
	$ChocolateySpec.package.metadata.AppendChild($ChocolateySpec.CreateElement("title")) | Out-Null
	$ChocolateySpec.package.metadata.title = $HumanReadableName
	$ChocolateySpec.package.metadata.RemoveChild($ChocolateySpec.package.metadata.SelectSingleNode("licenseUrl")) | Out-Null
	$ChocolateySpec.package.metadata.RemoveChild($ChocolateySpec.package.metadata.SelectSingleNode("projectUrl")) | Out-Null
	$ChocolateySpec.package.metadata.RemoveChild($ChocolateySpec.package.metadata.SelectSingleNode("iconUrl")) | Out-Null
	$ChocolateySpec.package.metadata.RemoveChild($ChocolateySpec.package.metadata.SelectSingleNode("releaseNotes")) | Out-Null
	$ChocolateySpec.package.metadata.RemoveChild($ChocolateySpec.package.metadata.SelectSingleNode("copyright")) | Out-Null
	$ChocolateySpec.package.metadata.dependencies.RemoveAll()
	$ChocolateySpec.Save($ChocolateySpecLocation)
	
	#Chocolatey Install Script Creation
		
	$NugetTools = $NugetLocation + "\Tools"
	
	Try
	{
		New-Item $NugetTools -Type Directory -ErrorAction Stop | Out-Null
	} Catch {
		Write-Host "Could not create program directory of $NugetTools.
Please ensure that the user running this script has Write permissions to this location, and try again.`r`n"
	}
	
	$PackageArguments = ""
	IF ($IsMSI)
	{		
		IF ($SilentInstall)
		{
			$PackageArguments = $PackageArguments + " /qn"
		}
		IF ($NoRestart)
		{
			$PackageArguments = $PackageArguments + " /norestart"
		}
	}
	$PackageArguments = $PackageArguments + " " + $CustomInstallFlags
	$PackageArguments = $PackageArguments.Trim()
	$ChocolateyInstallScriptLocation = $NugetTools + "\chocolateyInstall.ps1"
	
	$ChocolateyInstallScript = '$packageName = ' + "'$PackageName'
" + '$version = ' + "'"
	IF ($PreviousVersion)
	{
		$ChocolateyInstallScript = $ChocolateyInstallScript + $PreviousVersion + "'"
	} ELSE {
		$ChocolateyInstallScript = $ChocolateyInstallScript + $MostRecentVersion + "'"
	}
	$ChocolateyInstallScript = $ChocolateyInstallScript + "
" + '$fileType = '

	IF ($IsMSI)
	{
		$ChocolateyInstallScript = $ChocolateyInstallScript + "'msi'"
	} ELSE {
		$ChocolateyInstallScript = $ChocolateyInstallScript + "'exe'"
	}
	
	$ChocolateyInstallScript = $ChocolateyInstallScript + "
" + '$installArgs = ' + "'$PackageArguments'
"

	IF ($Is64Bit)
	{
		$ChocolateyInstallScript = $ChocolateyInstallScript + '$url64 = ' + "'$InstallerLocation'"
	} ELSE {
		$ChocolateyInstallScript = $ChocolateyInstallScript + '$url = ' + "'$InstallerLocation'"
	}
	$ChocolateyInstallScript = $ChocolateyInstallScript + "
" + '$majorVersion = ([version] $version).Major

'
	IF ($WMIPackageName)
	{
		$ChocolateyInstallScript = $ChocolateyInstallScript + '$alreadyInstalled = Get-WmiObject -Class Win32_Product | Where-Object {
	$_.Name -like "' + $WMIPackageName + '" -And
	$_.Version -eq $version
}

if ($alreadyInstalled) {
	Write-Output $(' + "'$HumanReadableName '" + ' +
		$version + ' + "' is already installed.')
	} else {"
	}
	$ChocolateyInstallScript = $ChocolateyInstallScript + "Install-ChocolateyPackage " + '$packageName $fileType $installArgs '
	
	IF ($Is64Bit)
	{
		$ChocolateyInstallScript = $ChocolateyInstallScript + '$url64'
	} ELSE {
		$ChocolateyInstallScript = $ChocolateyInstallScript + '$url'
	}
	
	IF ($WMIPackageName)
	{
		$ChocolateyInstallScript = $ChocolateyInstallScript + "
}"
	}
	
	$ChocolateyInstallScript | Out-File $ChocolateyInstallScriptLocation
	
	#Generate Nuget
	
	$NugetCommand = $IncludesDir + "\nuget.exe pack " + $ChocolateySpecLocation + " -OutputDirectory " + $ChocolateyRepo
	
	Invoke-Expression $NugetCommand | Out-Null
	
	Remove-Item $NugetLocation -Recurse -Force -ErrorAction SilentlyContinue
}