function EmailReport
{
	IF (($EmailTo -eq $Null) -Or ($EmailSubject -eq $Null) -Or ($EmailServer -eq $Null) -Or ($EmailFrom -eq $Null))
	{
		Write-Host "It looks like you want to send an Email Report, but you are missing some of the required parameters.
Please correct this before continuing."
		Return
	}
	
	$EmailBody = "Package Report:<p>"
	$Sendonnewversion = $False
	$UpdateResultsCommand = $UpdateResults.TrimEnd(",") + ")"
	
	IF ($Packages.Count -eq 1)
	{
		$UpdateResultsCommand = $UpdateResultsCommand.Substring(2,$UpdateResultsCommand.Length - 3)
		Write-Host $UpdateResultsCommand
	}
	
	$UpdateResults = $UpdateResultsCommand | Invoke-Expression
	Write-Host $UpdateResults
	Start-Sleep 10
	
	ForEach ($Update in $UpdateResults)
	{
		$EmailBody = $EmailBody + "<br>" + $Update[0] + " is on version "
		IF ($Update[2] -eq $True)
		{
			$EmailBody = $EmailBody + "<font color=`"red`">" + $Update[1] + "</font>"
			$Sendonnewversion = $True
		} ELSE {
			$EmailBody = $EmailBody + "<font color=`"green`">" + $Update[1] + "</font>"
		}
	}
	$EmailBody = $EmailBody + "<p><font color=`"red`">Red Versions</font> Have been updated.<br><font color=`"green`">Green Versions</font> Have Not been updated."
	
	$EmailMessage = New-Object System.Net.Mail.MailMessage
	$EmailMessage.From = $EmailFrom
	$EmailTo = $EmailTo.Split(",")
	ForEach ($Address in $EmailTo)
	{
		$EmailMessage.To.Add($Address)
	}	
	$EmailMessage.Subject = $EmailSubject
	$EmailMessage.IsBodyHtml = $True
	$EmailMessage.Body = $EmailBody
	IF ($EmailOnNewVersionOnly -eq $True)
	{
		IF ($Sendonnewversion -eq $True)
		{
			$EmailClient.Send($EmailMessage)
		}
	} ELSE {
		$EmailClient.Send($EmailMessage)
	}
}