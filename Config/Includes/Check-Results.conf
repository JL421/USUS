function Check-Results($NewInstaller, $Name, $Version, $TempLocation, $NoVersion, $LocalRepo)
{
	IF ($NewInstaller -eq $True)
	{
		Write-Host "New Version of $Name Available!`r`n"
		Try
		{
			Copy-Item $TempLocation $LocalRepo -Force -ErrorAction Stop
		} Catch {
			Write-Host "Could not copy new installer to $LocalRepo.
Please ensure that this script has Write permissions to this location, and try again.`r`n"
		} Finally {
			
			Write-Host "$Name updated to version $Version!`r`n"
		
			IF ($NoVersion)
			{
				Write-Host "$Name doesn't seem to use the Product Version property in their installers.
Please let them know you want this added!`r`n"
			}
		}
		Start-Job -ScriptBlock {
			param($FileDelete)& {
				WHILE (Test-Path $FileDelete)
				{
					Remove-Item $FileDelete -Force -ErrorAction SilentlyContinue
					Start-Sleep 5
				}
			}
		} -ArgumentList $TempLocation | out-null
		"$Name is on Version - $Version" | Out-File $InstallerVersionReportLocation -Append
		"$Name Updated to Version - $Version" | Out-File $InstallerChangeReportLocation -Append
		
	} ELSEIF ($NewInstaller -eq $False) {
		Write-Host "No New Version of $Name Available`r`n"
		Start-Job -ScriptBlock {
			param($FileDelete)& {
				WHILE (Test-Path $FileDelete)
				{
					Remove-Item $FileDelete -Force -ErrorAction SilentlyContinue
					Start-Sleep 5
				}
			}
		} -ArgumentList $TempLocation | out-null
		"$Name is on Version - $Version" | Out-File $InstallerVersionReportLocation -Append
	} ELSEIF ($NewInstaller -eq $Null)
	{
	}
}