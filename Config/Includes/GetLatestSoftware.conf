Function GetLatestSoftware
{	
	#Define Local Variables
	
	$CurrentMetaData = $LocalRepo + "\" + $Filename + ".conf"
	$CurrentInstaller = $LocalRepo + "\" + $InstallerName
	$templocation = $env:TEMP + "\" + $InstallerName
	
	
	#Get the current software version
	
	IF (!(Test-Path $CurrentMetaData))
	{
		IF ($IsMSI)
		{
			IF (!(Test-Path $CurrentInstaller))
			{
				$CurrentVersion = "0"
			} ELSE {
				[string]$CurrentVersion = MSI-Version $CurrentInstaller
			}
		} ELSE {
			IF (!(Test-Path $CurrentInstaller))
			{
				$CurrentVersion = "0"
			} ELSE {
				[string]$CurrentVersion = [System.Diagnostics.FileVersionInfo]::GetVersionInfo($CurrentInstaller).FileVersion
				IF ($CurrentVersion -eq $Null -Or $CurrentVersion -eq "")
				{
					$CurrentVersion = (Get-Item $CurrentInstaller).Length
				}
			}		
		}
	} ELSE {
		[string]$CurrentVersion = Get-Content $CurrentMetaData
		
		IF (!(Test-Path $CurrentInstaller))
		{
			$ForceDownload = $True #If there is a current version, but there isn't an installer, force the download to run regardless of a new version being available or not.
		}
	}
	
	
	#Generate Dynamic URL
		
	IF ($URLGenerator -ne $Null)
	{
		$VersionURL = Invoke-Command -scriptblock {param($CurrentVersion, $WebClient)& $URLGenerator} -ArgumentList $CurrentVersion,$WebClient
		
		IF($VersionURL.Count -eq 2)
		{
			$URL = $VersionURL[0]
			[string]$LatestVersion = $VersionURL[1]
		} ELSEIF($VersionURL -ne $Null) {
			$URL = $VersionURL
		} ELSE {
			Return
		}
	}
	
	
	#Get New Installer if Necessary
	
	IF ($IsMSI)
	{
		IF ($LatestVersion -eq $Null)
		{
			Get-NewInstaller $URL $templocation
			[string]$LatestVersion = MSI-Version $templocation
		} ELSE {
			IF ($CurrentVersion -ne $LatestVersion)
			{
				Get-NewInstaller $URL $templocation
			}
		}		
	} ELSE {
		IF ($LatestVersion -eq $Null)
		{
			Get-NewInstaller $URL $templocation
			
			[string]$LatestVersion = [System.Diagnostics.FileVersionInfo]::GetVersionInfo($templocation).FileVersion
			
			IF ($LatestVersion -eq $Null -Or $LatestVersion -eq "")
			{
				$LatestVersion = (Get-Item $templocation).Length
				$NoVersion = $True
			}
		} ELSE {
			IF ($CurrentVersion -ne $LatestVersion)
			{
				Get-NewInstaller $URL $templocation
			}
		}		
	}
	
	
	#Trim Versions to ensure consistency
	
	IF ($CurrentVersion -ne $Null)
	{	
		$CurrentVersion = $CurrentVersion.Trim()
		$CurrentVersion = $CurrentVersion.TrimEnd(".")
	}
	
	IF ($LatestVersion -ne $Null)
	{
		$LatestVersion = $LatestVersion.Trim()
		$LatestVersion = $LatestVersion.TrimEnd(".")
	}
	
	
	#If ForceDownload was Triggered, download the new installer
	
	IF ($ForceDownload -eq $True)
	{
		Get-NewInstaller $URL $templocation
		$CurrentVersion = $Null
	}
	
	#Compare Versions and Return if an update is available, and the applicable versions (Current if no new version, Current and Latest in a new version is available)
	IF ($CurrentVersion -eq $LatestVersion)
	{
		IF ($CurrentVersion -eq $False)
		{
			$CurrentVersion = "Not Available"
		}				
		$CurrentVersion | Out-File $CurrentMetaData
		Return $False, $templocation, $CurrentVersion, $Null
	} ELSE {
		IF ($LatestVersion -eq $False)
		{
			$LatestVersion = "Not Available"
			Return $False, $templocation, $CurrentVersion
		}		
		$LatestVersion | Out-File $CurrentMetaData
		Return $True, $templocation, $LatestVersion, $CurrentVersion
	}
	
}
