Function GetLatestSoftware([string]$CurrentSoftware, [string]$url, $Name, $IsMSI, $Is64Bit, $URLGenerator)
{
	$filename = $Name
	
	IF ($Is64Bit -eq $True)
	{
		$CurrentSoftware = $CurrentSoftware + "-x64"
		$filename = $filename + "-x64"
	}
	
	$CurrentMetaData = $CurrentSoftware + ".conf"
	
	IF ($IsMSI -eq $True)
	{
		$CurrentSoftware = $CurrentSoftware + ".msi"
		$filename = $filename + ".msi"
		
	} ELSE {
		$CurrentSoftware = $CurrentSoftware + ".exe"
		$filename = $filename + ".exe"
	}
	
	IF (!(Test-Path $CurrentMetaData))
	{
		IF ($IsMSI -eq $True)
		{
			IF (!(Test-Path $CurrentSoftware))
			{
				$CurrentVersion = "0"
			} ELSE {
				[string]$CurrentVersion = MSI-Version $CurrentSoftware
			}
		} ELSE {
			IF (!(Test-Path $CurrentSoftware))
			{
				$CurrentVersion = "0"
			} ELSE {
				[string]$CurrentVersion = [System.Diagnostics.FileVersionInfo]::GetVersionInfo($CurrentSoftware).FileVersion
				IF ($CurrentVersion -eq $Null -Or $CurrentVersion -eq "")
				{
					$CurrentVersion = (Get-Item $CurrentSoftware).Length
				}
			}		
		}
	} ELSE {
		[string]$CurrentVersion = Get-Content $CurrentMetaData
		
		IF (!(Test-Path $CurrentSoftware))
		{
			$ForceDownload = $True
		}
	}
	
	#Generate Dynamic URL
		
	IF ($URLGenerator -ne $Null)
	{
		$VersionURL = Invoke-Command -scriptblock {param($CurrentVersion, $WebClient)& $URLGenerator} -ArgumentList $CurrentVersion,$WebClient
		
		IF($VersionURL.Count -eq 2)
		{
			$url = $VersionURL[0]
			[string]$LatestVersion = $VersionURL[1]
		} ELSEIF($VersionURL -ne $Null) {
			$url = $VersionURL
		} ELSE {
			Return
		}
	}
	
	IF ($IsMSI -eq $True)
	{
		$templocation = $env:TEMP + "\" + $filename
				
		IF (($LatestVersion -ne $Null) -And (!(Test-Path $CurrentMetaData)))
		{
			[string]$TempVersion = $LatestVersion
			Remove-Variable LatestVersion
		}
		
		IF ($LatestVersion -eq $Null)
		{
			Get-NewInstaller $url $templocation
			[string]$LatestVersion = MSI-Version $templocation
		} ELSE {
			IF ($CurrentVersion -ne $LatestVersion)
			{
				Get-NewInstaller $url $templocation
			}
		}		
	} ELSE {
	
		$templocation = $env:TEMP + "\" + $filename
		
		IF (($LatestVersion -ne $Null) -And (!(Test-Path $CurrentMetaData)))
		{
			[string]$TempVersion = $LatestVersion
			Remove-Variable LatestVersion
			
		}
		IF ($LatestVersion -eq $Null)
		{
			Get-NewInstaller $url $templocation
			
			[string]$LatestVersion = [System.Diagnostics.FileVersionInfo]::GetVersionInfo($templocation).FileVersion
			
			IF ($LatestVersion -eq $Null -Or $LatestVersion -eq "")
			{
				$LatestVersion = (Get-Item $templocation).Length
				$NoVersion = $True
			}
		} ELSE {
			IF ($CurrentVersion -ne $LatestVersion)
			{
				Get-NewInstaller $url $templocation
			}
		}		
	}
	
	IF ($CurrentVersion -ne $Null)
	{	
		$CurrentVersion = $CurrentVersion.Trim()
		$CurrentVersion = $CurrentVersion.TrimEnd(".")
	}
	
	IF ($LatestVersion -ne $Null)
	{
		$LatestVersion = $LatestVersion.Trim()
		$LatestVersion = $LatestVersion.TrimEnd(".")
	}
	
	IF ($TempVersion -ne $Null)
	{	
		$TempVersion = $TempVersion.Trim()
		$TempVersion = $TempVersion.TrimEnd(".")
	}
	
	IF ($ForceDownload -eq $True)
	{
		Get-NewInstaller $url $templocation
		$CurrentVersion = "0"
	}
	
	IF ($CurrentVersion -eq $LatestVersion)
	{
		IF ($TempVersion -ne $Null)
		{
			$CurrentVersion = $TempVersion
		}
		IF ($CurrentVersion -eq $False)
		{
			$CurrentVersion = "Not Available"
		}				
		$CurrentVersion | Out-File $CurrentMetaData
		Return $False, $templocation, $CurrentVersion
	} ELSE {
		IF ($TempVersion -ne $Null)
		{
			$LatestVersion = $TempVersion
		}
		IF ($LatestVersion -eq $False)
		{
			$LatestVersion = "Not Available"
			Return $False, $templocation, $LatestVersion
		}		
		$LatestVersion | Out-File $CurrentMetaData
		Return $True, $templocation, $LatestVersion, $NoVersion
	}
	
}
