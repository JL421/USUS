function Make-InstallPackages
{	
	$InstallerLocation = $LocalRepo + "\" + $InstallerName
	$DeploymentLocation = $LocalRepo + "\" + $Filename
	
	IF ($BatchFiles)
	{
		$BatchFile = "@ECHO OFF`r`n
$BatchFileVersion`r`n
cls`r`n
IF NOT `"$MostRecentVersion`"==`"%currentversion%`" "
	
		IF ($IsMSI)
		{
			$BatchFile = $BatchFile + "msiexec.exe /i `"$InstallerLocation`""
				
			IF ($SilentInstall)
			{
				$BatchFile = $BatchFile + " /qn"

			}
			IF ($NoRestart)
			{
				$BatchFile = $BatchFile + " /norestart"
			}
		
		} ELSE {
			$BatchFile = $BatchFile + $InstallerLocation
		}
	
		IF ($CustomInstallFlags -ne $Null)
		{
			$BatchFile = $BatchFile + " " + $CustomInstallFlags
		}
		$BatchLocation = $DeploymentLocation + ".bat"
		$BatchFile | Out-File $BatchLocation -Encoding "OEM"
	}
	
	
	IF ($Lansweeper)
	{
		$LansweeperPackageShare = $LansweeperRepo + $Group + $PackageName + "\"
		$LansweeperInstaller = $LansweeperPackageShare + $InstallerName
		$LansweeperFile = "<?xml version=`"1.0`" encoding=`"utf-8`"?>
<Package>
  <Name>$HumanReadableName - Install - v$MostRecentVersion`</Name>
  <Description>$PackageDescription`Installs the latest $HumanReadableName - Version ($MostRecentVersion`)
Updated by USUS - $TimeDateString</Description>
  <ShutdownOption>0</ShutdownOption>
  <ShutdownTime>0</ShutdownTime>
  <MaxDuration>900</MaxDuration>
  <Rescan>True</Rescan>
  <RunMode>2</RunMode>
  <Steps>
    <Step>
      <Nr>1</Nr>
      <Name>Check Install File</Name>
      <Type>5</Type>
      <ReturnCodes></ReturnCodes>
      <Success>-1</Success>
      <Failure>-3</Failure>
      <Path></Path>
      <Parameters></Parameters>
      <MSIParameters></MSIParameters>
      <MSIName></MSIName>
      <MSIVersion></MSIVersion>
      <Command></Command>
      <EditMode>False</EditMode>
      <Conditions>
        <Condition>
          <Type>1</Type>
          <SpecOne>$LansweeperPackageShare</SpecOne>
          <SpecTwo>$InstallerName</SpecTwo>
          <Operator>1</Operator>
          <Value></Value>
        </Condition>
      </Conditions>
    </Step>
    <Step>
      <Nr>2</Nr>
      <Name>Install $HumanReadableName</Name>
      <Type>1</Type>
      <ReturnCodes>0,1641,3010</ReturnCodes>
      <Success>-2</Success>
      <Failure>-3</Failure>
      <Path>$LansweeperInstaller</Path>
      "
	  IF(!($IsMSI))
	  {
		IF($CustomInstallFlags -ne $Null)
		{
			$LansweeperFile = $LansweeperFile + "<Parameters>$CustomInstallFlags</Parameters>"
		} ELSE {
			$LansweeperFile = $LansweeperFile + "<Parameters></Parameters>"
		}
		$LansweeperFile = $LansweeperFile + "      <MSIParameters></MSIParameters>
	  <MSIName></MSIName>
      <MSIVersion></MSIVersion>"
	  } ELSE {
		$LansweeperFile = $LansweeperFile + "<Parameters>$CustomInstallFlags</Parameters>
	  <MSIParameters>"
		IF($SilentInstall)
		{
			$MSIParameters = $MSIParameters + "/qn "
		}
		IF($NoRestart)
		{
			$MSIParameters = $MSIParameters + "/norestart "
		}
		IF($CustomInstallFlags -ne $Null)
		{
			$MSIParameters = $MSIParameters + "$CustomInstallFlags"
		}
		$MSIParameters = $MSIParameters.Trim()
		$LansweeperFile = $LansweeperFile + "/i " + $MSIParameters + "</MSIParameters>"

		$LansweeperFile = $LansweeperFile + "
	  <MSIName>$HumanReadableName</MSIName>
      <MSIVersion>$MostRecentVersion</MSIVersion>"
	  }
	  $LansweeperFile = $LansweeperFile + "
      <Command>"
	  IF(!($IsMSI))
	  {
		$LansweeperFile = $LansweeperFile + "`"$LansweeperInstaller`" "
		
		IF($CustomInstallFlags -ne $Null)
		{
			$LansweeperFile = $LansweeperFile + $CustomInstallFlags
		}
		
	  } ELSE {
		$LansweeperFile = $LansweeperFile + "msiexec.exe /i `"$LansweeperInstaller`" $MSIParameters"
	  }
	  $LansweeperFile = $LansweeperFile + "</Command>
      <EditMode>False</EditMode>
      <Conditions />
    </Step>
  </Steps>
  <SoftwareVersion>5242</SoftwareVersion>
</Package>"

		$LansweeperPath = $DeploymentLocation + "-Lansweeper.xml"
		$LansweeperFile | Out-File $LansweeperPath -Encoding "UTF8"
	}
	
	IF ($PDQ)
	{
	
	$PDQFile = "<?xml version=`"1.0`" encoding=`"utf-8`"?>
<AdminArsenal.Export Code=`"PDQDeploy`" Name=`"PDQ Deploy`" Version=`"5.1.0.0`" MinimumVersion=`"2.3.0.16`">
   <Package>
     <Description>$PackageDescription`Installs the latest $HumanReadableName - Version ($MostRecentVersion)
Updated by USUS - $TimeDateString</Description>
     <Name>$HumanReadableName - v$MostRecentVersion</Name>
	 <Path>$LocalRepo</Path>
     <Version>$MostRecentVersion</Version>
     <PackageDefinition name=`"Definition`">
       <CopyMode>Default</CopyMode>
       <InventoryScanProfileId value=`"null`" />
       <RunAs value=`"null`" />
       <ScanAfterDeployment value=`"null`" />
       <Timeout value=`"60`" />
       <UseCustomTimeout value=`"false`" />
       <Steps type=`"list`">
         <InstallStep>
           <CustomCommandLine></CustomCommandLine>
           <FileName>`$(Repository)$Group$PackageName\$PackageName.bat</FileName>
           <Files></Files>
           <IncludeDirectory value=`"true`" />
           <MsiOperation>Install</MsiOperation>
           <MsiQuiet value=`"true`" />
           <MsiRestart>Never</MsiRestart>
           <Parameters>associate_common</Parameters>
           <SuccessCodes>0,1641,3010</SuccessCodes>
           <RunAs value=`"null`" />
           <ErrorMode>StopDeploymentFail</ErrorMode>
           <IsEnabled value=`"true`" />
           <Title></Title>
           <TypeName>Install</TypeName>
           <Conditions type=`"list`">
             <PackageStepCondition>
               <Architecture>"
			   
			   IF($Is64Bit)
			   {
					$PDQFile = $PDQFile + "Bits64"
			   } ELSE {
					$PDQFile = $PDQFile + "Bits32"
			   }
			   
			   $PDQFile = $PDQFile + "</Architecture>
               <Version>All</Version>
               <TypeName>OperatingSystem</TypeName>
             </PackageStepCondition>
             <PackageStepCondition>
               <IsUserLoggedOn>AlwaysRun</IsUserLoggedOn>
               <TypeName>LoggedOnUser</TypeName>
             </PackageStepCondition>
           </Conditions>
         </InstallStep>
       </Steps>
     </PackageDefinition>
     <PackageDisplaySettings name=`"DisplaySettings`">
       <DisplayType>Normal</DisplayType>
       <IconKey></IconKey>
     </PackageDisplaySettings>
   </Package>
</AdminArsenal.Export>"

		$PDQPath = $DeploymentLocation + "-PDQ.xml"
		$PDQFile | Out-File $PDQPath -Encoding "UTF8"
	
	}

	IF ($SFX)
	{
		$SFXSourceFiles = $LocalRepo + "\"
		$SFXPath = $DeploymentLocation + "-SFX.exe"
		$SFXDFile = "[Version]		
Class=IEXPRESS
SEDVersion=3
[Options]
PackagePurpose=InstallApp
ShowInstallProgramWindow=1
HideExtractAnimation=1
UseLongFileName=1
InsideCompressed=0
CAB_FixedSize=0
CAB_ResvCodeSigning=0
RebootMode=N
InstallPrompt=%InstallPrompt%
DisplayLicense=%DisplayLicense%
FinishMessage=%FinishMessage%
TargetName=%TargetName%
FriendlyName=%FriendlyName%
AppLaunched=%AppLaunched%
PostInstallCmd=%PostInstallCmd%
AdminQuietInstCmd=%AdminQuietInstCmd%
UserQuietInstCmd=%UserQuietInstCmd%
SourceFiles=SourceFiles
[Strings]
InstallPrompt=
DisplayLicense=
FinishMessage=
TargetName=$SFXPath
FriendlyName=$HumanReadableName
AppLaunched=cmd /c $Filename.bat
PostInstallCmd=<None>
AdminQuietInstCmd=
UserQuietInstCmd=
FILE0=`"$Filename.bat`"
FILE1=`"$InstallerName`"
[SourceFiles]
SourceFiles0=$SFXSourceFiles
[SourceFiles0]
%FILE0%=
%FILE1%="
		$SFXdPath = $DeploymentLocation + "-SFXd.sed"
		$SFXDFile | Out-File $SFXdPath -Encoding "OEM"
		IExpress.exe /N /Q $SFXDPath
	}
}